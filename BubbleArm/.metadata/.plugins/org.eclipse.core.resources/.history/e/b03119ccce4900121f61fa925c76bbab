/*
 * Pumps.c
 *
 *  Created on: Apr 2, 2012
 *      Author: vivid
 */

#include "driver_config.h"

#include "type.h"
#include "i2c.h"
#include "gpio.h"
#include "Pumps.h"

extern volatile uint8_t I2CMasterBuffer[I2C_BUFSIZE];
extern volatile uint8_t I2CSlaveBuffer[I2C_BUFSIZE];
extern volatile uint32_t I2CMasterState;
extern volatile uint32_t I2CReadLength, I2CWriteLength;

volatile uint16_t PumpsSpeed[8];

uint32_t PumpsInit()
{
	/* Initialize GPIO (sets up clock) */
	GPIOInit();
	/* Set pumps port pin to output */
	GPIOSetDir(PUMPS_PORT, PUMPS_1_BIT, 1);
	LPC_IOCON ->R_PIO1_0 = 0x0009;
	GPIOSetValue(PUMPS_PORT, PUMPS_1_BIT, 0);

	GPIOSetDir(PUMPS_PORT, PUMPS_2_BIT, 1);
	LPC_IOCON ->R_PIO1_1 = 0x0009;
	GPIOSetValue(PUMPS_PORT, PUMPS_2_BIT, 0);

	GPIOSetDir(PUMPS_PORT, PUMPS_3_BIT, 1);
	LPC_IOCON ->PIO1_4 = 0x0008;
	GPIOSetValue(PUMPS_PORT, PUMPS_3_BIT, 0);

	GPIOSetDir(PUMPS_PORT, PUMPS_4_BIT, 1);
	LPC_IOCON ->PIO1_5 = 0x0008;
	GPIOSetValue(PUMPS_PORT, PUMPS_4_BIT, 0);

	GPIOSetDir(PUMPS_PORT, PUMPS_5_BIT, 1);
	LPC_IOCON ->PIO1_8 = 0x0008;
	GPIOSetValue(PUMPS_PORT, PUMPS_5_BIT, 0);

	GPIOSetDir(PUMPS_PORT, PUMPS_6_BIT, 1);
	LPC_IOCON ->PIO1_9 = 0x0008;
	GPIOSetValue(PUMPS_PORT, PUMPS_6_BIT, 0);

	GPIOSetDir(PUMPS_PORT, PUMPS_7_BIT, 1);
	LPC_IOCON ->PIO1_10 = 0x0008;
	GPIOSetValue(PUMPS_PORT, PUMPS_7_BIT, 0);

	GPIOSetDir(PUMPS_PORT, PUMPS_8_BIT, 1);
	LPC_IOCON ->PIO1_11 = 0x0008;
	GPIOSetValue(PUMPS_PORT, PUMPS_8_BIT, 0);

	if (I2CInit((uint32_t) I2CMASTER) == FALSE) /* initialize I2c */
	{
		while (1)
			; /* Fatal error */
	}

	PumpsSpeed[0] = 0;
	PumpsSpeed[1] = 0;
	PumpsSpeed[2] = 0;
	PumpsSpeed[3] = 0;
	PumpsSpeed[4] = 0;
	PumpsSpeed[5] = 0;
	PumpsSpeed[6] = 0;
	PumpsSpeed[7] = 0;

	I2CWriteLength = 4;
	I2CReadLength = 0;
	I2CMasterBuffer[0] = ((AD5669R_ADDR) << 1);
	I2CMasterBuffer[1] = 0x3F; /* address */
	I2CMasterBuffer[2] = 0xFF;
	I2CMasterBuffer[3] = 0xFF;
	I2CEngine();
	if (I2CMasterState != I2C_OK)
	{
		return FALSE;
	}

	//SetupTimers to support PWM
	LPC_SYSCON ->SYSAHBCLKCTRL |= (1 << 7);
	LPC_TMR16B0->TCR = 0x02;
	LPC_TMR16B0 ->MCR = 0x0003;
	LPC_TMR16B0 ->MR0 = 32767;
	LPC_TMR16B0 ->MR1 = 32767;
	LPC_TMR16B0 ->MR2 = 32767;
	LPC_TMR16B0 ->MR3 = 32767;
	LPC_TMR16B0->TCR = 0x01;
	LPC_TMR16B1->TCR = 0x02;
	LPC_TMR16B1 ->MCR = 0x0003;
	LPC_TMR16B1 ->MR0 = 32767;
	LPC_TMR16B1 ->MR1 = 32767;
	LPC_TMR16B1 ->MR2 = 32767;
	LPC_TMR16B1 ->MR3 = 32767;
	LPC_TMR16B1->TCR = 0x01;
	NVIC_EnableIRQ(TIMER_16_0_IRQn);
	NVIC_EnableIRQ(TIMER_16_1_IRQn);
	return TRUE;
}

void TIMER16_0_IRQHandler(void)
{
	if (LPC_TMR16B0 ->IR & 0x1)
	{
		LPC_TMR16B0 ->IR = 1; /* clear interrupt flag */
		if (PumpsSpeed[0] != 0)
			GPIOSetValue(PUMPS_PORT, PUMPS_1_BIT, 1);
		if (PumpsSpeed[1] != 0)
			GPIOSetValue(PUMPS_PORT, PUMPS_2_BIT, 1);
		if (PumpsSpeed[2] != 0)
			GPIOSetValue(PUMPS_PORT, PUMPS_3_BIT, 1);
	}
	if (LPC_TMR16B0 ->IR & (0x1 << 1))
	{
		LPC_TMR16B0 ->IR = 0x1 << 1; /* clear interrupt flag */
		GPIOSetValue(PUMPS_PORT, PUMPS_1_BIT, 0);
	}
	if (LPC_TMR16B0 ->IR & (0x1 << 2))
	{
		LPC_TMR16B0 ->IR = 0x1 << 2; /* clear interrupt flag */
		GPIOSetValue(PUMPS_PORT, PUMPS_2_BIT, 0);
	}
	if (LPC_TMR16B0 ->IR & (0x1 << 3))
	{
		LPC_TMR16B0 ->IR = 0x1 << 3; /* clear interrupt flag */
		GPIOSetValue(PUMPS_PORT, PUMPS_3_BIT, 0);
	}
	if (LPC_TMR16B0 ->IR & (0x1 << 4))
	{
		LPC_TMR16B0 ->IR = 0x1 << 4; /* clear interrupt flag */
		timer16_0_capture++;
	}
	return;
}

void TIMER16_1_IRQHandler(void)
{
	if (LPC_TMR16B1 ->IR & 0x1)
	{
		LPC_TMR16B1 ->IR = 1; /* clear interrupt flag */
		GPIOSetValue(PUMPS_PORT, PUMPS_4_BIT, 1);
		GPIOSetValue(PUMPS_PORT, PUMPS_5_BIT, 1);
		GPIOSetValue(PUMPS_PORT, PUMPS_6_BIT, 1);
	}
	if (LPC_TMR16B1 ->IR & (0x1 << 1))
	{
		LPC_TMR16B1 ->IR = 0x1 << 1; /* clear interrupt flag */
		GPIOSetValue(PUMPS_PORT, PUMPS_4_BIT, 0);
	}
	if (LPC_TMR16B1 ->IR & (0x1 << 2))
	{
		LPC_TMR16B1 ->IR = 0x1 << 2; /* clear interrupt flag */
		GPIOSetValue(PUMPS_PORT, PUMPS_5_BIT, 0);
	}
	if (LPC_TMR16B1 ->IR & (0x1 << 3))
	{
		LPC_TMR16B1 ->IR = 0x1 << 3; /* clear interrupt flag */
		GPIOSetValue(PUMPS_PORT, PUMPS_6_BIT, 0);
	}
	if (LPC_TMR16B1 ->IR & (0x1 << 4))
	{
		LPC_TMR16B1 ->IR = 0x1 << 4; /* clear interrupt flag */
		timer16_1_capture++;
	}
	return;
}

uint32_t PumpsSetSpeed(uint8_t channel, uint16_t value)
{
	uint16_t tmp;
	if (!(channel >= 1 && channel <= 8))
		return FALSE;
	channel -= 1;
	I2CWriteLength = 4;
	I2CReadLength = 0;
	I2CMasterBuffer[0] = ((AD5669R_ADDR) << 1);
	I2CMasterBuffer[1] = (0x30 + channel); /* address */
	if (chanel < 6)
	{
		if (value < 32768)
		{
			I2CMasterBuffer[2] = 0xFF;
			I2CMasterBuffer[3] = 0xFF;
		}
		else
		{
			tmp = 65535 - (value - 32768) * 2;
			I2CMasterBuffer[2] = (tmp >> 8);
			I2CMasterBuffer[3] = tmp;
		}
	}
	else
	{
		tmp = 65535 - value;
		I2CMasterBuffer[2] = (tmp >> 8);
		I2CMasterBuffer[3] = tmp;
	}

	I2CEngine();
	if (I2CMasterState != I2C_OK)
	{
		return FALSE;
	}

	switch (channel)
	{
	case 0:
		if (value > 32768)
		{
			LPC_TMR16B0 ->MCR &= ~(0x1 << 3);
			GPIOSetValue(PUMPS_PORT, PUMPS_1_BIT, 1);
		}
		else
		{
			GPIOSetValue(PUMPS_PORT, PUMPS_1_BIT, 1);
			LPC_TMR16B0 ->MR1 = value;
			LPC_TMR16B0 ->MCR |= (0x1 << 3);
		}
		break;
	case 1:
		if (value > 32768)
		{
			LPC_TMR16B0 ->MCR &= ~(0x1 << 6);
			GPIOSetValue(PUMPS_PORT, PUMPS_2_BIT, 1);
		}
		else
		{
			GPIOSetValue(PUMPS_PORT, PUMPS_2_BIT, 1);
			LPC_TMR16B0 ->MR2 = value;
			LPC_TMR16B0 ->MCR |= (0x1 << 6);
		}
		break;
	case 2:
		if (value > 32768)
		{
			LPC_TMR16B0 ->MCR &= ~(0x1 << 9);
			GPIOSetValue(PUMPS_PORT, PUMPS_3_BIT, 1);
		}
		else
		{
			GPIOSetValue(PUMPS_PORT, PUMPS_3_BIT, 1);
			LPC_TMR16B0 ->MR3 = value;
			LPC_TMR16B0 ->MCR |= (0x1 << 9);
		}
		break;
	case 3:
		if (value > 32768)
		{
			LPC_TMR16B1 ->MCR &= ~(0x1 << 3);
			GPIOSetValue(PUMPS_PORT, PUMPS_4_BIT, 1);
		}
		else
		{
			GPIOSetValue(PUMPS_PORT, PUMPS_4_BIT, 1);
			LPC_TMR16B1 ->MR1 = value;
			LPC_TMR16B1 ->MCR |= (0x1 << 3);
		}
		break;
	case 4:
		if (value > 32768)
		{
			LPC_TMR16B1 ->MCR &= ~(0x1 << 6);
			GPIOSetValue(PUMPS_PORT, PUMPS_5_BIT, 1);
		}
		else
		{
			GPIOSetValue(PUMPS_PORT, PUMPS_5_BIT, 1);
			LPC_TMR16B1 ->MR2 = value;
			LPC_TMR16B1 ->MCR |= (0x1 << 6);
		}
		break;
	case 5:
		if (value > 32768)
		{
			LPC_TMR16B1 ->MCR &= ~(0x1 << 9);
			GPIOSetValue(PUMPS_PORT, PUMPS_6_BIT, 1);
		}
		else
		{
			GPIOSetValue(PUMPS_PORT, PUMPS_6_BIT, 1);
			LPC_TMR16B1 ->MR3 = value;
			LPC_TMR16B1 ->MCR |= (0x1 << 9);
		}
		break;
	case 6:
		if (value > 0)
			GPIOSetValue(PUMPS_PORT, PUMPS_7_BIT, 1);
		else
			GPIOSetValue(PUMPS_PORT, PUMPS_7_BIT, 0);
		break;
	case 7:
		if (value > 0)
			GPIOSetValue(PUMPS_PORT, PUMPS_8_BIT, 1);
		else
			GPIOSetValue(PUMPS_PORT, PUMPS_8_BIT, 0);
		break;
	default:
		break;
	}
	PumpsSpeed[channel] = value;
	return TRUE;
}

uint16_t PumpsGetSpeed(uint8_t channel)
{
	if (!(channel >= 1 && channel <= 8))
		return FALSE;
	channel -= 1;
	return PumpsSpeed[channel];
}
