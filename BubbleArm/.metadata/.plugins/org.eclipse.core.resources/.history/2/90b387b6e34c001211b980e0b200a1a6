#include "driver_config.h"
#include "uart.h"
#include "Pumps.h"
#include "UartPacket.h"
#include "LPC11xx.h"
#include "gpio.h"
#include "main.h"
#include "FreeRTOS.h"
#include "semphr.h"

uint8_t InBuff[MAX_PAYLOAD_LENGTH+4];
uint8_t InputPayload[MAX_PAYLOAD_LENGTH];
uint8_t InCount,InLength,InTempLength,InSum,NewInData;
uint8_t OutputBuff[MAX_PAYLOAD_LENGTH+4];
uint8_t OutCount,OutLength,OutBusy;

volatile uint16_t NewSpeed[8];

xSemaphoreHandle xSerialSemaphore = 0;

void prvDataReceiveTask( void *pvParameters )
{
	uint8_t n;
	pvParameters = pvParameters;
	PumpsInit();
	vSemaphoreCreateBinary( xSerialSemaphore );
	if(xSerialSemaphore == 0)
	{
		while(1);
	}
	for(n=0;n<8;n++)
		NewSpeed[n] = 0;
	PumpsSetSpeed(1, NewSpeed[0]);
    for(;;)
    {
    	if( xSemaphoreTake( xSerialSemaphore, portMAX_DELAY ) == pdTRUE )
    	{
    		if (InLength == 16)
			{
				for (n = 0; n < 8; n++)
				{
					NewSpeed[n] = InputPayload[2 * n];
					NewSpeed[n] += (((uint16_t) (InputPayload[2* n + 1])) << 8);
				}
				PumpsSetSpeed(1, NewSpeed[0]);
				PumpsSetSpeed(2, NewSpeed[1]);
				PumpsSetSpeed(3, NewSpeed[2]);
				PumpsSetSpeed(4, NewSpeed[3]);
				PumpsSetSpeed(5, NewSpeed[4]);
				PumpsSetSpeed(6, NewSpeed[5]);
				PumpsSetSpeed(7, NewSpeed[6]);
				PumpsSetSpeed(8, NewSpeed[7]);
				GPIOToggle(LED_PORT,LED_RED_BIT);
			}
    	}
    }
}


void PacketInit(uint32_t Baudrate)
{
	UARTInit(Baudrate);
	InCount = 0;
	InLength = 0;
	NewInData = 0;
	LPC_UART->IER = IER_RBR | IER_THRE;	/* Enable UART interrupt */
}

uint8_t PacketReceive(uint8_t* payload,uint8_t *length)
{
	if(NewInData == 1)
	{
		payload = InputPayload;
		*length = InLength;
		NewInData = 0;
		InLength = 0;
		return PACKET_RECEIVE_SUCCESS;
	}
	return PACKET_RECEIVE_FAIL;
}


uint8_t PacketSend(uint8_t* payload,uint8_t length)
{
	uint8_t sum,i,tmp;
	if(OutBusy !=0 )
		return PACKET_SEND_ERROR_BUSY;
	if(length > MAX_PAYLOAD_LENGTH)
		return PACKET_SEND_ERROR_LENGTH;
	OutputBuff[0] = 0xAA;
	sum = 0xAA;
	OutputBuff[1] = 0x55;
	sum += 0x55;
	OutputBuff[2] = length+4;
	sum += length+4;
	for(i=4;i<length+4;i++)
	{
		tmp = *(payload+i-4);
		OutputBuff[i] = tmp;
		sum += tmp;
	}
	OutputBuff[3] = -sum;
	OutLength = length+4;

	LPC_UART->THR = OutputBuff[0];
	OutCount = 1;
	OutBusy = 1;
	return PACKET_SEND_SUCCESS;
}

void UART_IRQHandler(void){
	uint8_t IIRValue, LSRValue;
	uint8_t temp = temp;
	uint8_t n;
	static signed portBASE_TYPE xHigherPriorityTaskWoken;

	IIRValue = LPC_UART->IIR;

	IIRValue >>= 1; /* skip pending bit in IIR */
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
	if (IIRValue == IIR_RLS) /* Receive Line Status */
	{
		LSRValue = LPC_UART->LSR;
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			temp = LPC_UART->RBR; /* temp read on RX to clear
			 interrupt, then bail out */
			return;
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			temp = LPC_UART->RBR;
		}
	}
	else if (IIRValue == IIR_RDA) /* Receive Data Available */
	{
		/* Receive Data Available */
		temp = LPC_UART->RBR;

		if (InCount == 0)
		{
			if (temp == 0xAA)
			{
				InBuff[InCount] = temp;
				InSum = 0xAA;
				InCount++;
			}
		}
		else if (InCount == 1)
		{
			if (temp == 0x55)
			{
				InBuff[InCount] = temp;
				InCount++;
				InSum += 0x55;
			}
			else if(temp != 0xAA)
			{
				InCount = 0;
			}
		}
		else if (InCount == 2)
		{
			InLength = temp-4;
			if(InLength > MAX_PAYLOAD_LENGTH+4)
				InCount = 0;
			else
			{
				InTempLength = temp;
				InCount++;
				InSum += temp;
			}
		}
		else
		{
			InBuff[InCount] = temp;
			InCount++;
			InSum += temp;

			if (InCount >= InTempLength)
			{
				if (InSum == 0)
				{
					for (n = 0; n < InLength; n++)
					{
						InputPayload[n] = InBuff[ n + 4];
					}
					NewInData = 1;
					xHigherPriorityTaskWoken = pdFALSE;
					if(xSerialSemaphore != 0)
						xSemaphoreGiveFromISR(xSerialSemaphore,&xHigherPriorityTaskWoken);
				}
				InCount = 0;
				InTempLength = 0;
			}
		}
	}
	else if (IIRValue == IIR_CTI) /* Character timeout indicator */
	{
		/* Character Time-out indicator */
	}
	else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
	{
		/* THRE interrupt */
		if (OutCount < OutLength) {
			LPC_UART->THR = OutputBuff[OutCount];
			OutCount++;
		}
		else
		{
			OutCount = 0;
			OutLength = 0;
			OutBusy = 0;
		}
	}
	return;
}
