/*
 * FlowRate.c
 *
 *  Created on: Apr 2, 2012
 *      Author: vivid
 */

#include "driver_config.h"

#include "type.h"
#include "gpio.h"
#include "Flowrate.h"
#include "FreeRTOS.h"
#include "semphr.h"
#include "task.h"
#include "UartPacket.h"
#include "main.h"

uint32_t Flowrate[8];
uint32_t count[8];
uint32_t rate[8][2];
uint8_t TxBuffer[32];
extern xSemaphoreHandle xControlSemaphore;

void prvDataSendTask(void *pvParameters)
{
	uint8_t n;
	portTickType xNextWakeTime;
	pvParameters = pvParameters;

	//Initialize UART
	FlowrateInit();
	PacketInit(115200);
	xNextWakeTime = xTaskGetTickCount();
	for (;;)
	{
		vTaskDelayUntil(&xNextWakeTime,
				1000 / DATA_SEND_FREQUENCY / portTICK_RATE_MS);
		for (n = 0; n < 8; n++)
		{
			TxBuffer[(n * 2)] = Flowrate[n];
			TxBuffer[(n * 2 + 1)] = (Flowrate[n] >> 8);
		}
		PacketSend((uint8_t*) TxBuffer, 16);
		GPIOToggle(LED_PORT,LED_GREEN_BIT);
	}
}

void FlowrateInit()
{
	uint32_t i;

	/* Initialize GPIO (sets up clock) */
	GPIOInit();
	/* Set flow-rate port pins to input */
	GPIOSetDir(FLOWRATE_PORT, FLOWRATE_1_BIT, 0);
	GPIOSetDir(FLOWRATE_PORT, FLOWRATE_2_BIT, 0);
	GPIOSetDir(FLOWRATE_PORT, FLOWRATE_3_BIT, 0);
	GPIOSetDir(FLOWRATE_PORT, FLOWRATE_4_BIT, 0);
	GPIOSetDir(FLOWRATE_PORT, FLOWRATE_5_BIT, 0);
	GPIOSetDir(FLOWRATE_PORT, FLOWRATE_6_BIT, 0);
	GPIOSetDir(FLOWRATE_PORT, FLOWRATE_7_BIT, 0);
	GPIOSetDir(FLOWRATE_PORT, FLOWRATE_8_BIT, 0);

	//enable interrupt on both edge of the flow-rate pins
	GPIOSetInterrupt(FLOWRATE_PORT, FLOWRATE_1_BIT, 0, 1, 0);
	GPIOIntClear(FLOWRATE_PORT, FLOWRATE_1_BIT);
	GPIOIntEnable(FLOWRATE_PORT, FLOWRATE_1_BIT);

	GPIOSetInterrupt(FLOWRATE_PORT, FLOWRATE_2_BIT, 0, 1, 0);
	GPIOIntClear(FLOWRATE_PORT, FLOWRATE_2_BIT);
	GPIOIntEnable(FLOWRATE_PORT, FLOWRATE_2_BIT);

	GPIOSetInterrupt(FLOWRATE_PORT, FLOWRATE_3_BIT, 0, 1, 0);
	GPIOIntClear(FLOWRATE_PORT, FLOWRATE_3_BIT);
	GPIOIntEnable(FLOWRATE_PORT, FLOWRATE_3_BIT);

	GPIOSetInterrupt(FLOWRATE_PORT, FLOWRATE_4_BIT, 0, 1, 0);
	GPIOIntClear(FLOWRATE_PORT, FLOWRATE_4_BIT);
	GPIOIntEnable(FLOWRATE_PORT, FLOWRATE_4_BIT);

	GPIOSetInterrupt(FLOWRATE_PORT, FLOWRATE_5_BIT, 0, 1, 0);
	GPIOIntClear(FLOWRATE_PORT, FLOWRATE_5_BIT);
	GPIOIntEnable(FLOWRATE_PORT, FLOWRATE_5_BIT);

	GPIOSetInterrupt(FLOWRATE_PORT, FLOWRATE_6_BIT, 0, 1, 0);
	GPIOIntClear(FLOWRATE_PORT, FLOWRATE_6_BIT);
	GPIOIntEnable(FLOWRATE_PORT, FLOWRATE_6_BIT);

	GPIOSetInterrupt(FLOWRATE_PORT, FLOWRATE_7_BIT, 0, 1, 0);
	GPIOIntClear(FLOWRATE_PORT, FLOWRATE_7_BIT);
	GPIOIntEnable(FLOWRATE_PORT, FLOWRATE_7_BIT);

	GPIOSetInterrupt(FLOWRATE_PORT, FLOWRATE_8_BIT, 0, 1, 0);
	GPIOIntClear(FLOWRATE_PORT, FLOWRATE_8_BIT);
	GPIOIntEnable(FLOWRATE_PORT, FLOWRATE_8_BIT);

	for (i = 0; i < 8; i++)
	{
		Flowrate[i] = 0;
		count[i] = 0;
		rate[i][0] = 0;
		rate[i][1] = 0;
	}

	//enable interrupt for timer and pins
	NVIC_EnableIRQ(EINT2_IRQn);

	//setup timer
	LPC_SYSCON ->SYSAHBCLKCTRL |= (1 << 9);
	LPC_TMR32B0 ->TCR = 0x02;
	LPC_TMR32B1 ->TCR = 0x02;
	LPC_TMR32B1 ->MCR = 0x03;
	LPC_TMR32B1 ->MR0 = SystemCoreClock / 10 - 1;
	LPC_TMR32B1 ->TCR = 0x01;
	LPC_TMR32B0 ->TCR = 0x01;
	NVIC_EnableIRQ(TIMER_32_1_IRQn);
}

void TIMER32_1_IRQHandler(void)
{
	uint32_t i;
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
	if (LPC_TMR32B1 ->IR & 0x01)
	{
		LPC_TMR32B1 ->IR = 1; /* clear interrupt flag */
		for(i = 0;i<8;i++)
		{
			if(rate[i][0] == 0)
				Flowrate[i] = 0;
			else
				Flowrate[i] = rate[i][1]/rate[i][0];
			rate[i][0]=0;
			rate[i][1]=0;
		}
		xSemaphoreGiveFromISR(xControlSemaphore,&xHigherPriorityTaskWoken);

	}
	if (LPC_TMR32B1 ->IR & (0x1 << 4))
	{
		LPC_TMR32B1 ->IR = 0x1 << 4; /* clear interrupt flag */
	}
	return;
}

void PIOINT2_IRQHandler(void)
{
	uint32_t regVal, m, n;

	m = LPC_TMR32B0 ->TC;
	regVal = LPC_GPIO2 ->MIS;
	LPC_GPIO2 ->IC = regVal;

	if (regVal & (0x1 << FLOWRATE_1_BIT))
	{
		n = m - count[0];
		count[0] = m;
		if (n > 0)
		{
			rate[0][0]++;
			rate[0][1] += SystemCoreClock / n;
		}
	}
	if (regVal & (0x1 << FLOWRATE_2_BIT))
	{
		n = m - count[1];
		count[1] = m;
		if (n > 0)
		{
			rate[1][0]++;
			rate[1][1] += SystemCoreClock / n;
		}
	}
	if (regVal & (0x1 << FLOWRATE_3_BIT))
	{
		n = m - count[2];
		count[2] = m;
		if (n > 0)
		{
			rate[2][0]++;
			rate[2][1] += SystemCoreClock / n;
		}
	}
	if (regVal & (0x1 << FLOWRATE_4_BIT))
	{
		n = m - count[3];
		count[3] = m;
		if (n > 0)
		{
			rate[3][0]++;
			rate[3][1] += SystemCoreClock / n;
		}
	}
	if (regVal & (0x1 << FLOWRATE_5_BIT))
	{
		n = m - count[4];
		count[4] = m;
		if (n > 0)
		{
			rate[4][0]++;
			rate[4][1] += SystemCoreClock / n;
		}
	}
	if (regVal & (0x1 << FLOWRATE_6_BIT))
	{
		n = m - count[5];
		count[5] = m;
		if (n > 0)
		{
			rate[5][0]++;
			rate[5][1] += SystemCoreClock / n;
		}
	}
	if (regVal & (0x1 << FLOWRATE_7_BIT))
	{
		n = m - count[6];
		count[6] = m;
		if (n > 0)
		{
			rate[6][0]++;
			rate[6][1] += SystemCoreClock / n;
		}
	}
	if (regVal & (0x1 << FLOWRATE_8_BIT))
	{
		n = m - count[7];
		count[7] = m;
		if (n > 0)
		{
			rate[7][0]++;
			rate[7][1] += SystemCoreClock / n;
		}
	}

	return;
}
